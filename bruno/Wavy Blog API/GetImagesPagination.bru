meta {
  name: Get Images Pagination
  type: http
  seq: 57
}

get {
  url: {{host}}/api/images?pageSize=5&pageIndex=1
  body: none
  auth: bearer
}

auth:bearer {
  token: {{access_token}}
}

params:query {
  pageSize: 5
  pageIndex: 1
}

tests {
  test("should respect pagination parameters", function() {
    expect(res.getStatus()).to.equal(200);
    const data = res.getBody();
    expect(data.images).to.be.an('array');
    expect(data.images.length).to.be.at.most(5);
    expect(data.pageSize).to.equal(5);
    expect(data.pageIndex).to.equal(1); // 1-based indexing
  });

  test("should have correct pagination metadata", function() {
    const data = res.getBody();
    expect(data.total).to.be.a('number');
    // Verify no hasMore field
    expect(data).to.not.have.property('hasMore');
    
    // Test required pagination fields
    expect(data).to.have.property('pageIndex');
    expect(data).to.have.property('pageSize');
    expect(data).to.have.property('total');
    expect(data).to.have.property('images');
  });

  test("should handle large page sizes", function() {
    // Page size should be capped at 100
    const data = res.getBody();
    expect(data.pageSize).to.be.at.most(100);
  });

  test("should handle invalid page index gracefully", function() {
    // Should default to 1 for invalid values (1-based indexing)
    const data = res.getBody();
    expect(data.pageIndex).to.be.at.least(1);
  });
}