meta {
  name: Login
  type: http
  seq: 2
}

post {
  url: {{host}}/api/users/login
  body: json
  auth: none
}

body:json {
  {
    "email": "test@example.com",
    "password": "password123"
  }
}

script:post-response {
  const jsonData = res.getBody();
  bru.setVar("access_token", jsonData.access_token);
  
  // Store user data for reference
  if (jsonData.user) {
    bru.setVar("user_id", jsonData.user.userID);
    bru.setVar("username", jsonData.user.username);
    
    // If user is admin, also set admin_access_token
    if (jsonData.user.role === "admin") {
      bru.setVar("admin_access_token", jsonData.access_token);
    }
  }
}

tests {
  test("should login successfully", function() {
    expect(res.getStatus()).to.equal(200);
    const data = res.getBody();
    expect(data.access_token).to.be.a('string');
    expect(data.user).to.be.an('object');
    expect(data.user.userID).to.be.a('string');
    expect(data.user.username).to.be.a('string');
    expect(data.user.email).to.equal("test@example.com");
    
    // Check avatar URL field exists (can be string or empty)
    expect(data.user).to.have.property('avatarURL');
    if (data.user.avatarURL) {
      expect(data.user.avatarURL).to.be.a('string');
    }
  });

  test("should have correct headers", function() {
    const contentType = res.getHeader("Content-Type") || res.getHeader("content-type");
    if (contentType) {
      expect(contentType).to.include("application/json");
    }
  });

  test("should set refresh token cookie", function() {
    const cookies = res.getHeaders()["set-cookie"];
    expect(cookies).to.be.an('array');
    const refreshCookie = cookies.find(cookie => cookie.includes("refresh_token="));
    expect(refreshCookie).to.exist;
    expect(refreshCookie).to.include("HttpOnly");
  });
}