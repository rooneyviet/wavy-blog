meta {
  name: Get Posts
  type: http
  seq: 7
}

get {
  url: {{host}}/api/posts
  body: none
  auth: none
}

params:query {
  ~postName: test-post
  ~pageSize: 10
  ~pageIndex: 1
}

tests {
  test("should get posts successfully", function() {
    expect(res.getStatus()).to.equal(200);
    const data = res.getBody();
    
    // Test paginated response structure
    expect(data).to.be.an('object');
    expect(data).to.have.property('pageIndex');
    expect(data).to.have.property('pageSize');
    expect(data).to.have.property('total');
    expect(data).to.have.property('posts');
    
    // Test pagination fields
    expect(data.pageIndex).to.be.a('number');
    expect(data.pageSize).to.be.a('number');
    expect(data.total).to.be.a('number');
    expect(data.posts).to.be.an('array');
    
    // Test that pageIndex is 1-based
    expect(data.pageIndex).to.be.at.least(1);
    
    if (data.posts.length > 0) {
      const post = data.posts[0];
      expect(post.slug).to.be.a('string');
      expect(post.title).to.be.a('string');
      expect(post.content).to.be.a('string');
      expect(post.authorID).to.be.a('string');
      expect(post.category).to.be.a('string');
      expect(post.createdAt).to.be.a('string');
      expect(post.updatedAt).to.be.a('string');
      
      // Check thumbnail URL field exists (can be string or empty)
      expect(post).to.have.property('thumbnailURL');
      if (post.thumbnailURL) {
        expect(post.thumbnailURL).to.be.a('string');
      }
    }
  });

  test("should have correct headers", function() {
    const contentType = res.getHeader("Content-Type") || res.getHeader("content-type");
    if (contentType) {
      expect(contentType).to.include("application/json");
    }
  });

  test("should handle pagination correctly", function() {
    const data = res.getBody();
    expect(res.getStatus()).to.equal(200);
    expect(data).to.have.property('pageIndex');
    expect(data).to.have.property('pageSize');
    expect(data).to.have.property('total');
    expect(data).to.have.property('posts');
    
    // Verify no hasNextPage or hasMore fields
    expect(data).to.not.have.property('hasNextPage');
    expect(data).to.not.have.property('hasMore');
  });
}