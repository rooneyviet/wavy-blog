meta {
  name: Update Post
  type: http
  seq: 8
}

put {
  url: {{host}}/api/posts/{{postSlug}}
  body: json
  auth: bearer
}

auth:bearer {
  token: {{access_token}}
}

body:json {
  {
    "title": "My First Post - Updated",
    "content": "This is the updated content of my first post.",
    "category": "Technology",
    "thumbnailURL": "http://example.com/updated-thumbnail.jpg"
  }
}

script:post-response {
  const jsonData = res.getBody();
  if (res.getStatus() === 200) {
    bru.setVar("updatedPostSlug", jsonData.slug);
    bru.setVar("updatedPostTitle", jsonData.title);
  }
}

tests {
  test("should update post successfully", function() {
    expect(res.getStatus()).to.equal(200);
    const data = res.getBody();
    expect(data.slug).to.be.a('string');
    expect(data.title).to.equal("My First Post - Updated");
    expect(data.content).to.equal("This is the updated content of my first post.");
    expect(data.category).to.equal("Technology");
    expect(data.authorID).to.be.a('string');
    expect(data.createdAt).to.be.a('string');
    expect(data.updatedAt).to.be.a('string');
  });

  test("should have correct headers", function() {
    const contentType = res.getHeader("Content-Type") || res.getHeader("content-type");
    if (contentType) {
      expect(contentType).to.include("application/json");
    }
  });

  test("should fail without authentication", function() {
    // This would be a separate test file without auth token
    // expect(res.getStatus()).to.equal(401);
  });

  test("should fail with non-owner user", function() {
    // This would be a separate test file with different user token
    // expect(res.getStatus()).to.equal(403);
  });

  test("should fail with invalid post slug", function() {
    // This would be a separate test file with non-existent slug
    // expect(res.getStatus()).to.equal(404);
  });
}